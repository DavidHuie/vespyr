// Code generated by mockery v1.0.0
package vespyr

import coinbase "github.com/DavidHuie/go-coinbase-exchange"
import mock "github.com/stretchr/testify/mock"

// MockGDAXClient is an autogenerated mock type for the GDAXClient type
type MockGDAXClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0
func (_m *MockGDAXClient) CreateOrder(_a0 *coinbase.Order) (coinbase.Order, error) {
	ret := _m.Called(_a0)

	var r0 coinbase.Order
	if rf, ok := ret.Get(0).(func(*coinbase.Order) coinbase.Order); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(coinbase.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*coinbase.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoricRates provides a mock function with given fields: product, p
func (_m *MockGDAXClient) GetHistoricRates(product string, p ...coinbase.GetHistoricRatesParams) ([]coinbase.HistoricRate, error) {
	_va := make([]interface{}, len(p))
	for _i := range p {
		_va[_i] = p[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, product)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []coinbase.HistoricRate
	if rf, ok := ret.Get(0).(func(string, ...coinbase.GetHistoricRatesParams) []coinbase.HistoricRate); ok {
		r0 = rf(product, p...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coinbase.HistoricRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...coinbase.GetHistoricRatesParams) error); ok {
		r1 = rf(product, p...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: _a0
func (_m *MockGDAXClient) GetOrder(_a0 string) (coinbase.Order, error) {
	ret := _m.Called(_a0)

	var r0 coinbase.Order
	if rf, ok := ret.Get(0).(func(string) coinbase.Order); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(coinbase.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
