// Code generated by mockery v1.0.0
package vespyr

import mock "github.com/stretchr/testify/mock"

// MockStrategyInterface is an autogenerated mock type for the StrategyInterface type
type MockStrategyInterface struct {
	mock.Mock
}

// Buy provides a mock function with given fields: history, current
func (_m *MockStrategyInterface) Buy(history []*IndicatorSet, current int) (bool, error) {
	ret := _m.Called(history, current)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]*IndicatorSet, int) bool); ok {
		r0 = rf(history, current)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*IndicatorSet, int) error); ok {
		r1 = rf(history, current)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Indicators provides a mock function with given fields:
func (_m *MockStrategyInterface) Indicators() []Indicator {
	ret := _m.Called()

	var r0 []Indicator
	if rf, ok := ret.Get(0).(func() []Indicator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Indicator)
		}
	}

	return r0
}

// Sell provides a mock function with given fields: history, current
func (_m *MockStrategyInterface) Sell(history []*IndicatorSet, current int) (bool, error) {
	ret := _m.Called(history, current)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]*IndicatorSet, int) bool); ok {
		r0 = rf(history, current)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*IndicatorSet, int) error); ok {
		r1 = rf(history, current)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTradingStrategy provides a mock function with given fields: t
func (_m *MockStrategyInterface) SetTradingStrategy(t *TradingStrategyModel) {
	_m.Called(t)
}

// String provides a mock function with given fields:
func (_m *MockStrategyInterface) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
