// Code generated by mockery v1.0.0
package vespyr

import mock "github.com/stretchr/testify/mock"
import time "time"

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend struct {
	mock.Mock
}

// CreateMarketOrder provides a mock function with given fields: _a0
func (_m *MockBackend) CreateMarketOrder(_a0 *MarketOrderModel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*MarketOrderModel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTradingStrategy provides a mock function with given fields: _a0
func (_m *MockBackend) CreateTradingStrategy(_a0 *TradingStrategyModel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*TradingStrategyModel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActiveTradingStrategies provides a mock function with given fields: _a0
func (_m *MockBackend) FindActiveTradingStrategies(_a0 Product) ([]*TradingStrategyModel, error) {
	ret := _m.Called(_a0)

	var r0 []*TradingStrategyModel
	if rf, ok := ret.Get(0).(func(Product) []*TradingStrategyModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*TradingStrategyModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCandlestickByID provides a mock function with given fields: _a0
func (_m *MockBackend) FindCandlestickByID(_a0 int64) (*CandlestickModel, error) {
	ret := _m.Called(_a0)

	var r0 *CandlestickModel
	if rf, ok := ret.Get(0).(func(int64) *CandlestickModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CandlestickModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCandlesticks provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockBackend) FindCandlesticks(_a0 time.Time, _a1 time.Time, _a2 Product, _a3 int64) ([]*CandlestickModel, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*CandlestickModel
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, Product, int64) []*CandlestickModel); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*CandlestickModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time, Product, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMarketOrderByID provides a mock function with given fields: _a0
func (_m *MockBackend) FindMarketOrderByID(_a0 int64) (*MarketOrderModel, error) {
	ret := _m.Called(_a0)

	var r0 *MarketOrderModel
	if rf, ok := ret.Get(0).(func(int64) *MarketOrderModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MarketOrderModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMostRecentCandlestick provides a mock function with given fields: _a0
func (_m *MockBackend) FindMostRecentCandlestick(_a0 Product) (*CandlestickModel, error) {
	ret := _m.Called(_a0)

	var r0 *CandlestickModel
	if rf, ok := ret.Get(0).(func(Product) *CandlestickModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CandlestickModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTradingStrategyByID provides a mock function with given fields: _a0
func (_m *MockBackend) FindTradingStrategyByID(_a0 int64) (*TradingStrategyModel, error) {
	ret := _m.Called(_a0)

	var r0 *TradingStrategyModel
	if rf, ok := ret.Get(0).(func(int64) *TradingStrategyModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TradingStrategyModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTradingStrategy provides a mock function with given fields: _a0
func (_m *MockBackend) UpdateTradingStrategy(_a0 *TradingStrategyModel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*TradingStrategyModel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertCandlestick provides a mock function with given fields: _a0
func (_m *MockBackend) UpsertCandlestick(_a0 *CandlestickModel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*CandlestickModel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
